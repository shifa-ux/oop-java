package javaapplication11;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

class Contact {
    private String fname;
    private String lname;
    private String[] phoneNum;
    private String affiliation;
    private String occupation;
    private String note = "";
    private String dob; 
    private boolean blocked = false;

  
    public Contact(String fname, String lname, String[] phoneNum, String affiliation, String occupation, String note, String dob) {
        this.fname = fname;
        this.lname = lname;
        this.phoneNum = phoneNum;
        this.affiliation = affiliation;
           this.occupation = occupation;
        this.note = note;
        this.dob = dob;
    }

    public Contact(String fname, String lname, String[] phoneNum, String affiliation, String occupation) {
        this(fname, lname, phoneNum, affiliation, occupation, "", null);
    }

    
    public String getFname() { return fname; }
    public void setFname(String fname) { this.fname = fname; 

    public String getLname() { return lname; }
    public void setLname(String lname) { this.lname = lname; }

    public String[] getPhoneNum() { return phoneNum; }
    public void setPhoneNum(String[] phoneNum) { this.phoneNum = phoneNum; }

    public String getAffiliation() { return affiliation; }
    public void setAffiliation(String affiliation) { this.affiliation = affiliation; }

    public String getOccupation() { return occupation; }
    public void setOccupation(String occupation) { this.occupation = occupation; }

    public String getNote() { return note; }
      public void setNote(String note) { this.note = note; }

    public String getDob() { return dob; }
    public void setDob(String dob) { this.dob = dob; }

    public boolean isBlocked() { return blocked; }
    public void setBlocked(boolean blocked) { this.blocked = blocked; }

   
    public void replaceNumber(String oldNum, String newNum) {
        for (int i = 0; i < phoneNum.length; i++) {
            if (phoneNum[i].equals(oldNum)) {
                phoneNum[i] = newNum;
                System.out.println("Number replaced successfully.");
                return;
            }
        }
        System.out.println("Old number not found.");
    }

   
    @Override
    public String toString() {
        return "Contact [fname=" + fname + ", lname=" + lname + ", phoneNum=" + Arrays.toString(phoneNum)
                + ", affiliation=" + affiliation + ", occupation=" + occupation + ", note=" + note + ", dob=" + dob
                + ", blocked=" + blocked + "]";
         }
}

public class PracticeOnline {
    private static ArrayList<Contact> directory = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Add Contact");
            System.out.println("2. Search Contact");
            System.out.println("3. Delete Contact");
            System.out.println("4. Replace Phone Number");
            System.out.println("5. Display All Contacts");
            System.out.println("6. Block a Contact");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();
              switch (choice) {
                case 1:
                    addContact(scanner);
                    break;
                case 2:
                    searchContact(scanner);
                    break;
                case 3:
                    deleteContact(scanner);
                    break;
                case 4:
                    replacePhoneNumber(scanner);
                    break;
                case 5:
                    displayAllContacts();
                    break;
                case 6:
                    blockContact(scanner);
                    break;
                case 7:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        } while (choice != 7);
          scanner.close();
    }

    private static void addContact(Scanner scanner) {
        System.out.print("Enter first name: ");
        String fname = scanner.nextLine();
        System.out.print("Enter last name: ");
        String lname = scanner.nextLine();
        System.out.print("Enter phone numbers (comma separated): ");
        String[] phoneNumbers = scanner.nextLine().split(",");
        System.out.print("Enter affiliation: ");
        String affiliation = scanner.nextLine();
        System.out.print("Enter occupation: ");
        String occupation = scanner.nextLine();
        System.out.print("Enter note: ");
        String note = scanner.nextLine();
        System.out.print("Enter date of birth (e.g., 1990-01-01): ");
        String dob = scanner.nextLine();

        Contact contact = new Contact(fname, lname, phoneNumbers, affiliation, occupation, note, dob);
        directory.add(contact);
        System.out.println("Contact added successfully.");
    }

    private static void searchContact(Scanner scanner) {
        System.out.print("Enter first name to search: ");
        String fname = scanner.nextLine();
          for (Contact contact : directory) {
            if (contact.getFname().equalsIgnoreCase(fname)) {
                System.out.println("Found: " + contact);
                return;
            }
        }
        System.out.println("Contact not found.");
    }

    private static void deleteContact(Scanner scanner) {
        System.out.print("Enter first name of the contact to delete: ");
        String fname = scanner.nextLine();
        for (Contact contact : directory) {
            if (contact.getFname().equalsIgnoreCase(fname)) {
                directory.remove(contact);
                System.out.println("Contact deleted successfully.");
                return;
            }
        }
        System.out.println("Contact not found.");
    }

    private static void replacePhoneNumber(Scanner scanner) {
        System.out.print("Enter first name of the contact: ");
        String fname = scanner.nextLine();
        for (Contact contact : directory) {
            if (contact.getFname().equalsIgnoreCase(fname)) {
                  System.out.print("Enter phone number to replace: ");
                String oldNum = scanner.nextLine();
                System.out.print("Enter new phone number: ");
                String newNum = scanner.nextLine();
                contact.replaceNumber(oldNum, newNum);
                return;
            }
        }
        System.out.println("Contact not found.");
    }

    private static void displayAllContacts() {
        if (directory.isEmpty()) {
            System.out.println("No contacts available.");
            return;
        }
        System.out.println("Contact Directory:");
        for (Contact contact : directory) {
            System.out.println(contact);
        }
    }

    private static void blockContact(Scanner scanner) {
        System.out.print("Enter first name of the contact to block: ");
        String fname = scanner.nextLine();
        for (Contact contact : directory) {
            if (contact.getFname().equalsIgnoreCase(fname)) {
                contact.setBlocked(true);
                 System.out.println("Contact blocked successfully.");
                return;
            }
        }
        System.out.println("Contact not found.");
}
}
